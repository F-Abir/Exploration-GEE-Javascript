
/* -------------------- 0) AOI from FAO GAUL: Bangladesh + Gazipur -------------------- */
var gaul0 = ee.FeatureCollection('FAO/GAUL/2015/level0');
var gaul2 = ee.FeatureCollection('FAO/GAUL/2015/level2');

var bangladesh = gaul0.filter(ee.Filter.eq('ADM0_NAME', 'Bangladesh')).first();
var bangladeshGeom = bangladesh.geometry();

var gazipur = gaul2
  .filter(ee.Filter.eq('ADM0_NAME', 'Bangladesh'))
  .filter(ee.Filter.eq('ADM2_NAME', 'Gazipur'))
  .first();
var gazipurGeom = gazipur.geometry();

// Vector visualization (Feature → FeatureCollection for style())
var bdFC = ee.FeatureCollection([bangladesh]);
var gzpFC = ee.FeatureCollection([gazipur]);

Map.centerObject(gazipur, 9);
Map.addLayer(bdFC.style({color: '000000', fillColor: '00000000', width: 1}), {}, 'Bangladesh boundary', true);
Map.addLayer(gzpFC.style({color: '00FFFF', fillColor: '00000000', width: 2}), {}, 'Gazipur (AOI)', true);

/* -------------------- 1) ERA5-Land monthly (2000–2025), unit-safe ------------------- */
var tempK = ee.ImageCollection('ECMWF/ERA5_LAND/MONTHLY_AGGR')
  .select('temperature_2m')
  .filterDate('2000-01-01', '2025-01-01');

var tempC = tempK.map(function(img){
  return img.subtract(273.15).rename('t2m_c').copyProperties(img, img.propertyNames());
});

var scale = tempC.first().projection().nominalScale(); // ~9 km

/* -------------------- 2) Fixed baseline (2000–2025) = 90th percentile ---------------- */
var baseline = tempC.reduce(ee.Reducer.percentile([90])).rename(['t2m_c_p90']);
var visBaseline = {min: 20, max: 35, palette: ['0015FF','66CCFF','FFFF66','FFA500','FF0000']};
Map.addLayer(baseline.clip(bangladeshGeom), visBaseline, 'Baseline P90 (2000–2025, °C)', false);

/* -------------------- 3) Yearly exceedance counts (2005–2010, editable) ------------- */
var yearStart = 2005;      // ← change for your study
var yearEnd   = 2010;      // ← change for your study
var years = ee.List.sequence(yearStart, yearEnd);

function yearlyCount(year){
  year = ee.Number(year);
  var collY = tempC.filter(ee.Filter.calendarRange(year, year, 'year'));
  var countY = collY.map(function(img){
      return img.gt(baseline); // 1 if month > P90 baseline, else 0
    })
    .sum()
    .rename('heatwave_count')
    .set('year', year);
  return countY;
}

var yearlyIC = ee.ImageCollection.fromImages(years.map(yearlyCount));

// Visualization per year (clipped to Bangladesh)
var visCount = {min: 0, max: 12, palette: ['FFFFFF','FFF5CC','FFCC99','FF9966','FF5C33','B30000']};
years.getInfo().forEach(function(y){
  var img = yearlyIC.filter(ee.Filter.eq('year', y)).first().clip(bangladeshGeom);
  Map.addLayer(img, visCount, 'Heatwave months > baseline: ' + y, false);
});

/* -------------------- 4) Region-wise statistics & image counts ----------------------- */
// Fraction of AREA with annual count >= thr
function areaFracAbove(imgCount, thr, region){
  var area = ee.Image.pixelArea();
  var maskAbove = imgCount.gte(thr);
  var areaAbove = area.updateMask(maskAbove);
  var areaTotal = area.updateMask(imgCount.mask());

  var areaTotalM2 = ee.Number(
    areaTotal.reduceRegion({reducer: ee.Reducer.sum(), geometry: region, scale: scale, maxPixels: 1e13, bestEffort: true})
             .get('area')
  );
  var areaAboveM2 = ee.Number(
    areaAbove.reduceRegion({reducer: ee.Reducer.sum(), geometry: region, scale: scale, maxPixels: 1e13, bestEffort: true})
             .get('area')
  );

  var totalKm2 = areaTotalM2.divide(1e6);
  var aboveKm2 = areaAboveM2.divide(1e6);
  var fracPct  = aboveKm2.divide(totalKm2).multiply(100);

  return ee.Dictionary({area_total_km2: totalKm2, area_above_km2: aboveKm2, pct_area_above: fracPct});
}

function regionStatsForYear(year){
  year = ee.Number(year);
  var img = yearlyIC.filter(ee.Filter.eq('year', year)).first();

  var meanBGD = img.reduceRegion({
    reducer: ee.Reducer.mean(), geometry: bangladeshGeom, scale: scale, maxPixels: 1e13, bestEffort: true
  }).get('heatwave_count');

  var maxBGD = img.reduceRegion({
    reducer: ee.Reducer.max(), geometry: bangladeshGeom, scale: scale, maxPixels: 1e13, bestEffort: true
  }).get('heatwave_count');

  var meanGZP = img.reduceRegion({
    reducer: ee.Reducer.mean(), geometry: gazipurGeom, scale: scale, maxPixels: 1e13, bestEffort: true
  }).get('heatwave_count');

  var maxGZP = img.reduceRegion({
    reducer: ee.Reducer.max(), geometry: gazipurGeom, scale: scale, maxPixels: 1e13, bestEffort: true
  }).get('heatwave_count');

  // Threshold: >= 3 warm months in a year (edit as needed)
  var fracBGD = areaFracAbove(img, 3, bangladeshGeom);
  var fracGZP = areaFracAbove(img, 3, gazipurGeom);

  // Count monthly images available for the year (sanity check)
  var nMonths = tempC.filter(ee.Filter.calendarRange(year, year, 'year')).size();

  return ee.Feature(null, {
    year: year,
    months_available: nMonths,

    mean_count_BGD: meanBGD,
    max_count_BGD:  maxBGD,
    pct_area_ge3_BGD: ee.Dictionary(fracBGD).get('pct_area_above'),
    area_ge3_km2_BGD: ee.Dictionary(fracBGD).get('area_above_km2'),
    area_total_km2_BGD: ee.Dictionary(fracBGD).get('area_total_km2'),

    mean_count_Gazipur: meanGZP,
    max_count_Gazipur:  maxGZP,
    pct_area_ge3_Gazipur: ee.Dictionary(fracGZP).get('pct_area_above'),
    area_ge3_km2_Gazipur: ee.Dictionary(fracGZP).get('area_above_km2'),
    area_total_km2_Gazipur: ee.Dictionary(fracGZP).get('area_total_km2')
  });
}

var statsFC = ee.FeatureCollection(years.map(regionStatsForYear));

// Baseline summary over Gazipur (Celsius)
var baseSummaryGazipur = baseline.reduceRegion({
  reducer: ee.Reducer.percentile([50, 75, 90, 95]),
  geometry: gazipurGeom, scale: scale, maxPixels: 1e13, bestEffort: true
});

// Simple national image-availability summary (2000–2025) – optional
var monthlyCountAll = tempC.size();


